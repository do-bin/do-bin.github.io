<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hexo基础配置</title>
    <link href="/posts/271.html"/>
    <url>/posts/271.html</url>
    
    <content type="html"><![CDATA[<h1 id="Hexo修改Fluid主题"><a href="#Hexo修改Fluid主题" class="headerlink" title="Hexo修改Fluid主题"></a>Hexo修改Fluid主题</h1><blockquote><p>以Fluid主题为例</p><p>Github项目<a href="https://github.com/fluid-dev/hexo-theme-fluid">fluid</a></p><p>主题文档<a href="https://hexo.fluid-dev.com/docs/start/#%E4%B8%BB%E9%A2%98%E7%AE%80%E4%BB%8B"> Hexo Fluid 用户手册</a></p></blockquote><h2 id="1-下载主题包"><a href="#1-下载主题包" class="headerlink" title="1. 下载主题包"></a>1. 下载主题包</h2><p>载 <a href="https://github.com/fluid-dev/hexo-theme-fluid">fluid</a> 解压到 themes 目录，并将解压出的文件夹重命名为 <code>fluid</code>。</p><p><img src="/posts/271/1-1.png" alt="image.png"></p><h2 id="2-修改-config-yml文件"><a href="#2-修改-config-yml文件" class="headerlink" title="2. 修改_config.yml文件"></a>2. 修改_config.yml文件</h2><p>如下修改 Hexo 博客目录中的 <code>_config.yml</code>：</p><div class="code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span><span class="hljs-attr">theme:</span> <span class="hljs-string">fluid</span>  <span class="hljs-comment"># 指定主题</span></code></pre></div><p><img src="/posts/271/2-1.png" alt="image.png"></p><p><img src="/posts/271/2-2.png" alt="image.png"></p><h2 id="3-本地部署查看效果并上传到GitHub"><a href="#3-本地部署查看效果并上传到GitHub" class="headerlink" title="3. 本地部署查看效果并上传到GitHub"></a>3. 本地部署查看效果并上传到GitHub</h2><p>hexo三件套</p><div class="code-wrapper"><pre><code class="hljs bash">hexo clean   // 清除缓存hexo g       // 生成打包hexo d       // 上传</code></pre></div><p><img src="/posts/271/3-1.png" alt="image.png"></p><h1 id="Hexo文章生成永久链接"><a href="#Hexo文章生成永久链接" class="headerlink" title="Hexo文章生成永久链接"></a>Hexo文章生成永久链接</h1><h2 id="1-默认文章链接配置"><a href="#1-默认文章链接配置" class="headerlink" title="1. 默认文章链接配置"></a>1. 默认文章链接配置</h2><div class="code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">premalink:</span> <span class="hljs-string">:year/:month/:day/:title</span></code></pre></div><p>这种生成的链接地址很长，文章版权的链接地址会出现一大串字符编码，一点也不好看。因此需要修改文章生成链接的格式。</p><h2 id="2-Hexo-abbrLink插件"><a href="#2-Hexo-abbrLink插件" class="headerlink" title="2. Hexo abbrLink插件"></a>2. Hexo abbrLink插件</h2><p>根目录Git Bash 终端运行以下代码</p><div class="code-wrapper"><pre><code class="hljs bash">npm install hexo-abbrlink --save</code></pre></div><h2 id="3-配置文件下添加"><a href="#3-配置文件下添加" class="headerlink" title="3. 配置文件下添加"></a>3. 配置文件下添加</h2><div class="code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">abbrlink:</span>     <span class="hljs-attr">alg:</span> <span class="hljs-string">crc16</span> <span class="hljs-comment">#算法：</span>    <span class="hljs-attr">crc16(default) and crc32 rep:</span> <span class="hljs-string">hex</span> </code></pre></div><p><img src="/posts/271/4-1.png" alt="image.png"></p><h2 id="4-配置文件permalink修改"><a href="#4-配置文件permalink修改" class="headerlink" title="4. 配置文件permalink修改"></a>4. 配置文件permalink修改</h2><div class="code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">permalink:</span> <span class="hljs-string">posts/:abbrlink.html</span>  <span class="hljs-comment"># 此处可以自己设置，也可以直接使用 :/abbrlink</span></code></pre></div><p><img src="/posts/271/5-1.png" alt="image.png"></p><p>生成完后，原md文件的Front-matter 内会增加<code>abbrlink</code> 字段，值为生成的<code>ID</code> 。这个字段确保了在我们修改了<code>Front-matter</code> 内的博客标题title或创建日期date字段之后而不会改变链接地址.</p><h1 id="Hexo-Asset-Image插件安装"><a href="#Hexo-Asset-Image插件安装" class="headerlink" title="Hexo Asset Image插件安装"></a>Hexo Asset Image插件安装</h1><blockquote><p>Hexo Asset Image 是一个专为 Hexo 博客框架设计的开源插件，它旨在简化图片资源的管理和插入流程。通过本插件，博主可以更加便捷地在文章中引用本地或远程的图片，并自动处理图片路径，优化博客的构建和部署过程。对于追求高效管理和优雅展示图片内容的Hexo用户来说，这是一个不可或缺的工具。</p></blockquote><p>主要解决本地图片资源加载不出的问题</p><h2 id="项目快速启动"><a href="#项目快速启动" class="headerlink" title="项目快速启动"></a>项目快速启动</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>首先确保你的Hexo环境已经搭建完毕，之后在博客根目录下，通过npm安装此插件：</p><div class="code-wrapper"><pre><code class="hljs bash">npm install hexo-asset-image --save</code></pre></div><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>编辑Hexo的配置文件<code>_config.yml</code>，添加以下行以启用插件：</p><div class="code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">plugins:</span>  <span class="hljs-bullet">-</span> <span class="hljs-string">hexo-asset-image</span></code></pre></div><p>插件会处理这个相对路径，在生成静态站点时将图片移动到正确的资产目录下，并自动更新Markdown文件中的图片链接。</p><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><p>在Markdown格式的文章中，你可以像下面这样直接引用图片：</p><div class="code-wrapper"><pre><code class="hljs markdown">![](<span class="hljs-link">path/to/your/image.jpg</span>)</code></pre></div><p>插件会处理这个相对路径，在生成静态站点时将图片移动到正确的资产目录下，并自动更新Markdown文件中的图片链接。</p><h3 id="自动创建同名文件夹放图片"><a href="#自动创建同名文件夹放图片" class="headerlink" title="自动创建同名文件夹放图片"></a>自动创建同名文件夹放图片</h3><p>查看hexo官网，可以看到官网推荐将<code>post_asset_folder</code>属性置为true，在新建博客<code>hexo n “xxx”</code>的时候会在根目录下创建一个同名的文件夹，将需要插入的图片放到这个目录。</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span><span class="hljs-attr">marked:</span>  <span class="hljs-attr">prependRoot:</span> <span class="hljs-literal">true</span>  <span class="hljs-attr">postAsset:</span> <span class="hljs-literal">true</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo博客在GitHub搭建</title>
    <link href="/posts/42759.html"/>
    <url>/posts/42759.html</url>
    
    <content type="html"><![CDATA[<h1 id="1-准备工具"><a href="#1-准备工具" class="headerlink" title="1.准备工具"></a>1.准备工具</h1><h2 id="1-1-Node-js和git"><a href="#1-1-Node-js和git" class="headerlink" title="1.1. Node.js和git"></a>1.1. Node.js和git</h2><p><a href="https://nodejs.org/en/">下载nodejs</a></p><p><a href="https://git-scm.com/downloads">下载git</a></p><h2 id="1-2-测试是否成功"><a href="#1-2-测试是否成功" class="headerlink" title="1.2. 测试是否成功"></a>1.2. 测试是否成功</h2><div class="code-wrapper"><pre><code class="hljs cmd">node -vnpm -v（这个是node附带的）git -v</code></pre></div><p><img src="/posts/42759/1.2-1.png" alt="image.png"></p><h2 id="1-3-下载Hexo"><a href="#1-3-下载Hexo" class="headerlink" title="1.3. 下载Hexo"></a>1.3. 下载Hexo</h2><div class="code-wrapper"><pre><code class="hljs cmd">npm install hexo-cli -g</code></pre></div><p><img src="/posts/42759/1.3-1.png" alt="image.png"></p><h1 id="2-搭建GitHub仓库"><a href="#2-搭建GitHub仓库" class="headerlink" title="2. 搭建GitHub仓库"></a>2. 搭建GitHub仓库</h1><p>成功下载好工具之后，我们开始搭建GitHub存储静态页面的仓库</p><ul><li>首先注册&#x2F;登入<a href="https://github.com/">Github</a></li><li>点击Create a new repository进入新建仓库页面</li></ul><p>仓库名输入：</p><div class="code-wrapper"><pre><code class="hljs jboss-cli">用户名<span class="hljs-string">.github.io</span></code></pre></div><blockquote><p>勾选 Public</p><p>勾选 Add a README file</p><p>拉到下面点击create创建</p></blockquote><p><img src="/posts/42759/2-1.png" alt="image.png"></p><h1 id="3-生成SSH-keys与GitHub建立连接"><a href="#3-生成SSH-keys与GitHub建立连接" class="headerlink" title="3. 生成SSH keys与GitHub建立连接"></a>3. 生成SSH keys与GitHub建立连接</h1><h2 id="3-1-生成SSH-Keys"><a href="#3-1-生成SSH-Keys" class="headerlink" title="3.1. 生成SSH Keys"></a>3.1. 生成SSH Keys</h2><p>桌面，右键空白处然后点Git bash here,输入</p><div class="code-wrapper"><pre><code class="hljs Bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;邮件地址&quot;</span></code></pre></div><p><img src="/posts/42759/3.1-1.png" alt="image.png"></p><p>然后进入<code>C:\Users\</code>用户名，在里面进入<code>.ssh</code>文件</p><p>用记事本打开里面的<code>id_rsa.pub</code>,全选复制里面的代码</p><h2 id="3-2-打开Github连接SSH"><a href="#3-2-打开Github连接SSH" class="headerlink" title="3.2. 打开Github连接SSH"></a>3.2. 打开Github连接SSH</h2><p>进入用户设置，找到SSH keys</p><p>新建SSH keys，名称随意，在下面粘贴代码，然后创建</p><p><img src="/posts/42759/3.2-1.png" alt="image.png"></p><h2 id="3-3-测试是否成功"><a href="#3-3-测试是否成功" class="headerlink" title="3.3. 测试是否成功"></a>3.3. 测试是否成功</h2><p>在git bash中输入</p><div class="code-wrapper"><pre><code class="hljs bash">ssh -T git@github.com</code></pre></div><p><img src="/posts/42759/3.3-1.png" alt="image.png"></p><h1 id="4-本地部署"><a href="#4-本地部署" class="headerlink" title="4. 本地部署"></a>4. 本地部署</h1><h2 id="4-1-hexo-初始化"><a href="#4-1-hexo-初始化" class="headerlink" title="4.1. hexo 初始化"></a>4.1. hexo 初始化</h2><p>在喜欢位置新建文件Blog，然后进入文件夹</p><p>右键空白处然后点Git bash here，输入</p><div class="code-wrapper"><pre><code class="hljs bash">hexo init</code></pre></div><p>如果‘command not find’，就在前面加上<code>npx</code>，如：<code>npx hexo init</code></p><h2 id="4-2-hexo-安装"><a href="#4-2-hexo-安装" class="headerlink" title="4.2. hexo 安装"></a>4.2. hexo 安装</h2><div class="code-wrapper"><pre><code class="hljs bash">hexo install    // hexo安装</code></pre></div><h2 id="4-3-hexo-打包生成部署本地"><a href="#4-3-hexo-打包生成部署本地" class="headerlink" title="4.3. hexo 打包生成部署本地"></a>4.3. hexo 打包生成部署本地</h2><div class="code-wrapper"><pre><code class="hljs bash">hexo g     // hexo生成hexo s     // hexo本地部署</code></pre></div><p>（如果不成功的话就重复直到成功，因为国内与github连接不稳定）</p><p>现在就可以复制生成的链接进入浏览器看到我们生成的本地服务器了</p><p>然后回到命令行，<code>ctrl+c</code>关闭</p><h1 id="5-上线博客"><a href="#5-上线博客" class="headerlink" title="5. 上线博客"></a>5. 上线博客</h1><h2 id="5-1-修改仓库地址"><a href="#5-1-修改仓库地址" class="headerlink" title="5.1. 修改仓库地址"></a>5.1. 修改仓库地址</h2><ul><li>进入之前的Blog文件夹，用记事本打开<code>_config.yml</code>,拉到最下面将deploy后面的全删掉，复制粘贴这段</li></ul><div class="code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">type:</span> <span class="hljs-string">git</span><span class="hljs-attr">repository:</span> <span class="hljs-attr">branch:</span> <span class="hljs-string">main</span></code></pre></div><p>注意缩进格式：每行前面都有两个空格不要删，每个冒号后面都有个空格也不要删！</p><ul><li>去github之前生成的仓库页面，点code，复制https链接</li></ul><p><img src="/posts/42759/5.1-1.png" alt="image.png"></p><ul><li>将其粘贴到我们记事本中的<code>repository：</code>后面,然后保存退出</li></ul><p><img src="/posts/42759/5.1-2.png" alt="image.png"></p><h2 id="5-2-回到博客文件夹，git-bash"><a href="#5-2-回到博客文件夹，git-bash" class="headerlink" title="5.2. 回到博客文件夹，git bash"></a>5.2. 回到博客文件夹，git bash</h2><h3 id="5-2-1-安装自动部署发布工具"><a href="#5-2-1-安装自动部署发布工具" class="headerlink" title="5.2.1. 安装自动部署发布工具"></a>5.2.1. 安装自动部署发布工具</h3><div class="code-wrapper"><pre><code class="hljs bash">npm install hexo-deployer-git --save</code></pre></div><h3 id="5-2-2-在Blog文件夹git-bash"><a href="#5-2-2-在Blog文件夹git-bash" class="headerlink" title="5.2.2. 在Blog文件夹git bash"></a>5.2.2. 在Blog文件夹git bash</h3><div class="code-wrapper"><pre><code class="hljs bash">hexo g   （生成）hexo d   （上传)</code></pre></div><p><img src="/posts/42759/5.2.2-1.png" alt="image.png"></p><p>如果是第一次使用git的话会需要配置</p><div class="code-wrapper"><pre><code class="hljs bash">git config --global user.email <span class="hljs-string">&quot;你的邮箱&quot;</span>git config --global user.name <span class="hljs-string">&quot;你的名字&quot;</span></code></pre></div><p>配置完后再<code>hexo d</code>上传</p><p>在跳出来的窗口内进行登录</p><p>接下来我们就成功把本地内容上传到github了</p><p>上传成功以后，我们就算搭建好了！上自己的网址看看吧</p><p>网址是我们之前设的仓库名：用户名.github.io</p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
